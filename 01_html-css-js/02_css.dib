#!meta

{"kernelInfo":{"defaultKernelName":null,"items":[{"name":"csharp","languageName":"C#","aliases":["c#","cs"]},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"html","languageName":"HTML"},{"name":"sql","languageName":"SQL"},{"name":"kql","languageName":"KQL"},{"name":"mermaid","languageName":"Mermaid"},{"name":"httpRequest","languageName":"http"},{"name":"value"}]}}

#!markdown

# CSS

#!markdown

## ¿Qué es y para qué sirve CSS?

#!markdown

CSS (Cascading Style Sheets) es un lenguaje de estilos en cascada, este lenguaje nos permite darle estilos a nuestro código HTML por medio de una regla de estilos, que conlleva un selector, propiedad y valor. En pocas palabras, servirá para darle estilos a nuestro código HTML.

#!markdown

## ¿Cuál es la estructura de CSS?

#!markdown

El selector se corresponde con uno o varios elementos, según la forma en que declaramos la regla de estilos. Para el, o los elementos, indicados por el selector, la propiedad, dentro de la regla de estilos, va a tener el valor que escribimos después de los dos puntos.
```
selector {
    propiedad: valor;
}
```

#!markdown

## Trabajar con css en documentos html

#!markdown

Lo ideal es trabajar con hojas de estilo fuera del documento html, para hacerlo conectamos la hoja de estilo al documento mediante la etiqueta `link`.
```
<link rel="stylesheet" href="css/estilos.css">
```
Mediante el atributo `rel` indicamos la relación que existe entre el archivo que estamos llamando y el documento, es decir, indicamos al navegador que el archivo es de hojas de estilo. mediante el atributo `href` indicamos la ruta donde se ecuentra el archivo css que estamos llamando. En el ejemplo la hoja de estilos se encuentra en la carpeta donde está el documento html, y dentro de esta en la carpeta css con el nombre `estilos.css`.
Para comodidad del trabajo con notebooks vamos a cargar los estilos mediante la etiqueta `<style>` en el documento html.

#!html

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mi primer código de CSS</title>
    <style>
        /* los estilos declarados en esta regla van a afectar a todos los elementos html que tengan cuadrado en su atributo class */
        .cuadrado{
            height: 5cm; /* alto */
            width: 5cm; /* ancho */
            background-color: steelblue;
            color: white; /* color de la letra */
            border: 2px solid black;
        }
    </style>    
</head>
<body>
    <!-- podemos escribir estilos en línea, esto significa, que las propiedades y valores las indicamos en el atributo style del elemento html, estos estilos solo van a aplicar al elemento sobre el cual los aplicamos  -->
    <div class="" style="color: chartreuse; font-size: 32px;">¡Hola mundo!</div>
    
    <div class="cuadrado">¡Hola Universo!</div>

</body>
</html>

#!markdown

## Selectores css

#!markdown

Los selectores son la primera parte de una regla css. Definen que elementos html van a ser modificados. Todos los elementos html que coincidan con el selecctor que declaremos se verán afectados por los estilos de ese selector. Si el selector no encuentra ninguna coincidencia en el documento, ningún elemento html va a ser modificado por ese selector.

#!markdown

### Selectores de tipo, clase e id

#!markdown

El ***selector universal*** permite seleccionar al todos los elementos del documento html. Siempre que se use tiene que ir primero que todos los demas selectores en el archivo css. El selector universal tiene una especificidad de 0, lo que quiere decir .................. Mediante el * indicamos que estamos seleccionando a todos los elementos. Si modificamos todos los elementos mediante el selector universar utilizando una propiedad, y más adelante en el documento css, volvemos a cambiar esa propiedad en otra regla, la segunda tiene más ponderancia que la primera por lo que la modificación del selector universal deja de aplicarse. Todos los selectores tienen implícito el selector universal, ya que aplican a todos los elementos de ese tipo, clase o id. La regla se vería de la forma `*.nombreClase{...}`, pero como está implícito ese primer * no se escribe quedando como `.nombreClase{...}`.

#!markdown

El ***selector de tipo***, conocido como selector de nombre o de etiqueta, selecciona una etiqueta para modificar, del documento html, mediante el nombre de la misma. En css el selector es el nombre de la etiqueta sin ninguna modificación, por ejemplo `h2`. Si existe más de una etiqueta de ese tipo, o con ese nombre, se van a modificar todos los elementos que lo tengan.

#!markdown

<br>El ***selector de clase*** selecciona elementos por el valor del atributo `class`. Un elemento puede tener más de una clase, por lo que podemos modificar ese elementos de formas distintas según los valores que tenga en el atributo clase. En css para indicar que se trata de un selector de clase utilizamos el punto antes del nombre de la clase de la forma `.nombreClase`.

#!markdown

El ***selector de id*** selecciona elementos por el valor que tiene el atributo `id`. En css indicamos que se trata de un selector de id utilizamos `#` antes del valor del atributo id de la forma `#valorId`. En html los id son identificadores únicos que no se deben repetir en todo el documento. Por este motivo los identificadores de id en css van a afectar a un único elemento, el que tenga como atributo ese id.

#!html

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Selectores</title>
    <style>
        /* 
        Los comentarios en css se hacen mediante se abren y cierran con la barra y el astorizco como los que se utilizan en este mismo comentario. Todo lo que queda dentro de estas barras y asteriscos son comentarios que no afectan al funcionamiento de la página.
        h1 {
            color: red;
        }
        */

        /* SELECTOR UNIVERSAL (no usar por que modifica toda la notebook) 
        * {
            letter-spacing: 10px;
        }
        */

        /* SELECTORES DE TIPO O ETIQUETA */

        /* modificamos el elemento body, que es el padre de todos los demás elementos visibles, para establecer una fuente para todo el documento */
        body {
            font-family: 'Arial';
        }
        li {
            color: slateblue;
            font-size: 20px;
        }

        /* SELECTORES DE CLASE */
        .peliculas {
            color: crimson;
        }
        .series {
            font-size: 40px;
        }
        .favoritas {
            font-weight: bold;
            color: rebeccapurple;
        }
        .espaciado {
            letter-spacing: 10px;
        }

        /* SELECTORES DE ID */
        #spidermanNoWayHome {
            font-size: 25px;
            color: tomato;
            text-decoration: underline;
        }
        #temporada3 {
            color: seagreen;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <h2 class="peliculas">Spiderman</h2>
    <ul>
        <li class="pelicula">Spiderman 1</li>

        <!-- el elemento se ve afectado por las modificaciones de la clase pelicula y la clase favoritas -->
        <li class="pelicula favoritas">Spiderman 2</li>
        <li class="pelicula espaciado" id="spidermanNoWayHome">Spider verse</li>
    </ul>
    <h2 class="series">The office</h2>
    <ul>
        <li class="temporadas">Temporada 1</li>
        <li class="temporadas">Temporada 2</li>
        <li class="temporadas" id="temporada3">Temporada 3</li>
    </ul>
</body>
</html>

#!markdown

### Selectores combinadores

#!markdown

Los selectores combinadores combinan mas de un selector básico, es decir, que vamos a ocupar más de un selector a la vez. Esto permite ser más específico sobre qué elemento queremos seleccionar.

#!markdown

El **selectore combinador de descendientes** es representado por un espacio en blanco, combina dos selectores, donde el primer selector hace referencia a un elemento que es ancestro del elemento al que hace referencia el segundo selector. Esto es lo que se conoce como descendencia, por que seleccionamos un primer elemento y a su descendiente. Por ejemplo
```
<body> -> es padre de div y footer, es ancestro de h1, p y span
    <div> -> es hermano de footer, es padre de h1 y p y es ancestro de span
        <h1> -> es hermano de p
        <p> -> es hermano de h1 y padre de span
            <span>
    <footer> -> es hermano de div
``` 
Algunos ejemplo de selectores combinadores descendientes, mediante selectores de tipo, serían `body h1{...}`, `div p {...}` o `div span {...}`. 

#!markdown

El **selector combinador de hijos directos** se representa mediante el simbolo de mayor `>`, combina dos selectores, donde el primer selector hace referencia al elemento padre del segundo selector que hace referencia al elemento hijo. Estos selectores en el elemento hijo se dice que son hijos directos del selector del elemento padre.

#!markdown

El **selector combinador de hermano adyacente** se representa mediante el símbolo `+`, combina dos selectores, donde el primer selector hace referencia a un elemento, el segundo selector hace referencia al siguiente elemento, hermano del primero, y la regla aplica a este segundo elemento. Este combinador puede ayudar a crear animaciones con css. 

#!markdown

El **selector combinador de hermanos generales** por el símbolo `~`, combina dos selectores, donde el primer selector hace referencia a un elemento, el segundo selector hace referencia a todos los hermanos siguientes al primero y la regla aplica sobre todos estos segundos elementos.

#!html

<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Combinadores</title>
    <style>
        /* SELECTOR COMBINADOR DE DESCENDIENTES */

        /* todos los elementos en los cuales su ancestro tiene la clase lista y su descendiente tiene la clase lista */
        .listas .lista {
            text-decoration: underline;
        }
        .todo .lista {
            list-style: decimal;
        }
        .dias .lista {
            list-style: none;
        }

        /* COMBINADOR DE HIJOS DIRECTOS */

        /* todos los elementos en los cuales su padre tiene la clase listas y solo sus hijos directos (no aplica a otros niveles de descendencia) tienen la clase lista */
        .listas>.lista {
            list-style: upper-roman;
        }
        .dias>.lista {
            color: orangered;
            font-weight: bold;
            font-size: 20px;
        }

        /* COMBINADOR DE HERMANO ADYACENTE */
        
        /* si un elemento tiene la clase subtitulo, y el elemento hermano siguiente tiene la clase parrafo, la regla aplica a este elemento con la clase parrafo */
        .subtitlo + .parrafo{
            background-color: yellow;
        }

        /* COMBINADOR DE HERMANOS GENERALES */

        /* si un elemento tiene la clase subtitulo, y los elementos hermanos siguientes tienen la clase parrafo, la regla aplica a estos elementos hermanos siguientes con la clase parrafo */
        .subtitlo~.parrafo {
            color: gray;
        }
    </style>
</head>

<body>
    <h2 class="titulo">Todo List</h2>    
    <ul class="todo listas">
        <li class="lista primera">Programar</li>
        <ul class="sublista">
            <li class="lista">Javascritpt</li>
            <li class="lista">PHP</li>
        </ul>
        <li class="lista">Correr</li>
        <li class="lista">Suscribirme</li>
    </ul>
    <h2 class="titulo">Día de la semana</h2>
    <ul class="dias listas">
        <li class="lista">Lunes</li>
        <li class="lista">Martes</li>
        <li class="lista">Miercoles</li>
    </ul>
    <article>
        <h2 class="subtitlo">¿Qué es un registro de hábitos?</h2>

        <p class="parrafo">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quibusdam vero expedita voluptatum?
        </p>

        <p class="parrafo">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quibusdam vero expedita voluptatum?
        </p>

        <p class="parrafo">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quibusdam vero expedita voluptatum?
        </p>
    </article>
</body>
</html>

#!markdown

### Selectores de atributos

#!markdown

Mediante los selectores de atributos podemos seleccionar elementos por medio de sus atributos. Para indicar que se trata de un selector de atributos utilizamos corchetes `[]`. Por ejemplo, si queremos seleccionar los elementos que tengan el atributo class, sin importar el valor que tome este atributo, lo indicamos como `[class]{...}`. También podemos especificar el valor del atributo a la hora de armar la regla, el ejemplo anterior con el atributo clase igual menu quedaría como `[class="munu"]{...}`. Podemos utilizar caracteres especiales para filtrar los atributos, estos son `* ~ ^ $` y nos sirven para indicar que se busque coicidencias de valor en los atributos de forma general o especifica.

#!html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Atributo</title>
    <style>

        /* seleccionamos a todos los elementos que tengan el atributo value */
        [value] {
            display: block;
            width: 90%;
            margin-top: 20px;
        }

        /* todos elementos que tengan el atributo type con valor text  */
        [type="text"]{
            background-color: aquamarine;
        }

        /* todos los elementos que tengan en el atributo value la cadena cursocss.com, aunque la misma forme parte de otra cadena. pisa la regla anterior */
        [value*="cursocss.com"] {
            background-color: yellow;
        }

        /* todos los elementos que tengan en el atributo value la cadena cursocss.com sola o rodeada por espacios en blanco. pisa la regla anterior */
        [value~="cursocss.com"] {
            background-color: coral;
        }

        /* todos los elementos que tengan en el atributo value la cadena cursocss.com al comienzo del valor del atributo. pisa la regla anterior */
        [value^="cursocss.com"] {
            background-color:grey;
        }

        /* todos los elementos que tengan en el atributo value la cadena cursocss.com al final del valor del atributo. pisa la regla anterior */
        [value$="cursocss.com"] {
            background-color:steelblue;
        }
    </style>
</head>

<body>
    <h2 class="titulo">Titulo</h2>
    <form class="form">
        <input type="text" value="Aquí introduce el nombre">
        <input type="email" value="Aquí irá el email para cursocss.com email">
        <input type="text" value="cursocss.com ingresar la dirección">
        <input type="text" value=" ingresar el celular para cursocss.com">
        <input type="password" value="Aqui Aquí irá la contraseña">

        <!-- aplica la regla value*="cursocss.com" por que tiene la cadena cursocss.com aunque la misma esté dentro de una cadena más grande -->
        <input type="submit" value="enviaracursocss.com.ar">
    </form>
</body>
</html>

#!markdown

## Herencia, cascada y especificidad

#!markdown

### Especificidad

#!markdown

La especificidad es el primer método que se utiliza para establecer que selector va a modificar un elemento, cuando más de uno de estos selectores lo afectan. La especificidad es el valor que se le da a los selectores en css. Cada selector tiene un valor de especificidad diferente al otro y los estilos que se muestren van a ser del selector con mayor especificidad.
* Los `selectores de id` son los selectores con valor de espcificidad 100. Son selectores especificos de un elemento en particular ya que el atributo id solo puede tomar un valor por elemento.
* Los `selectores de clase, atributo y pseudoclase` son los selectores con valor de especificidad 10. Suelen ser muy utilizadas por tener más especificidad que los `selectores de tipo y pseudoelemento` y no ser tan específicos como los `selecores de id`.
* Los `selectores de tipo y pseudoelemento` son los selectores con valor de especificidad 1, es decir, los que tienen la menor especificidad y los últimos en poder llegar a ser mostrados.

#!markdown

Si posicionamos el mouse sobre un selector en los editores de código como Visual Studio Code podemos ver el valor de especificidad de los mismos.

#!markdown

Los valores de especificidad de los selectores se pueden sumar cuando utilizamos selectores combinadores.
* `div p` tiene un valor de espcificidad de 2 ya que sus dos selectores son de tipo.
* `div p.principal` tiene un valor de espcificidad de 12 ya que suma los valores de especificidad de 1 de ambos selectores de tipo más el valor de especificidad de 10 del selector de clase.
* `div#header` tiene un valor de especificidad de 101 ya que suma el valor de especificidad de tipo más el valor de especificidad de id.

#!markdown

Podemos hacer que no se tome en cuenta el valor de especificidad de un selector y aplicar una propiedad de un selector con menor valor de especificidad que otros mediante la palabra reservada `!important`, que hace que se ignoren por completo estos valores. Se escribe de la forma
```
h1 {
    color : red !important; 
}
```
También podemos cambiar el estilo de un elemento en línea, es decir, en el propio elemento html de la forma `<div style="color:red">Texto en rojo</div>`. Estas formas de trabajo no se recomiendan.

#!markdown

### Cascada

#!markdown

La cascada es el segundo método que se utiliza para establecer que selector va a modificar un elemento. Css significa 'Cascading Style Sheets' que significa 'hojas de estilo en cascada'. La expresión 'en cascada' hace referencia a la forma en que van a ser aplicados los selectores, en caso de existir más de uno, que modifiquen a un mismo elemento de forma distinta.
* Si tenemos dos selectores afectando a un elemento, el estilo que se va a mostrar en pantalla es el del selector que este escrito más abajo en la hoja de estilos, o el que esté en la última hoja de estilo enlazada, en caso de tener varias de ellas enlazadas al documento.
* La cascada no cambia el valor de especificidad de los selectores. Siempre va a tener prioridad el selector con mayor valor de especificidad. En caso de tener el mismo valor de especificidad aplica el método de cascada para desempatar.
* Solo se ven afectadas las propiedades que esten repetidas en los subsiguientes selectores, es decir, en caso de tener la siguiente estructura, solo se ve modificada la propiedad `color` del elemento h1 del segundo selector, el elemento se va a mostrar con un `font-size: 25px` ya que esta propiedad no se ve modificada por el segundo selector.
    * ```
        h1 {
            color: steelblue;
            font-size: 25px;
        }
        h1.novedad {
            color: red;
        }
    ```

#!html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Herencia, Especificidad & Cascada</title>
    <style>
        body {
            border: 3px solid orange;
            font-family: cursive;
            color: steelblue;
        }       

        #header{...}
        .secciones{...}
        p{...}
        
        div#header{...}
        div p.secciones{...}
        div p{...}
        



        .title {
            border: inherit;
        }

        input {
            font-size: 25px;
            color: inherit;
            font-family: inherit;
        }
    </style>
</head>

<body>
    <h1 class="title" id="title">Hola, soy un titulo</h1>
    <p>Hola, soy un parrafo</p>
    <input type="text" placeholder="Hola mundo">
</body>
</html>
