#!meta

{"kernelInfo":{"defaultKernelName":null,"items":[{"name":"csharp","languageName":"C#","aliases":["c#","cs"]},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"html","languageName":"HTML"},{"name":"sql","languageName":"SQL"},{"name":"kql","languageName":"KQL"},{"name":"mermaid","languageName":"Mermaid"},{"name":"httpRequest","languageName":"http"},{"name":"value"}]}}

#!markdown

# Tipos de datos en JavaScript

#!markdown

## Tipos de datos

#!markdown

El tipo de dato `string` (cadena de caracteres)

#!javascript

var nombre = "Carlos";
console.log(nombre);

#!markdown

El tipo de dato `number` (númerico)

#!javascript

var numero = 1000;
console.log(numero);

#!markdown

El tipo de dato `object` (objeto)

#!javascript

var objeto = {
    nombre : "Juan",
    apellido : "Perez",
    telefono : "55443322"
}
console.log(objeto);

#!markdown

Las variables son dinámicas, con asignarle el valor indicamos el tipo de datos que almacena, a su vez si cambiamos su valor por otro, de otro tipo de datos, la misma cambia para adatarse a al mismo.

#!markdown

El tipo de dato `typeof` devuelve el tipo de datos que está almacenado en la variable al momento de usarlo.

#!javascript

var nombre = "Carlos";
console.log(typeof nombre);

var nombre = 5;
console.log(typeof nombre);

var objeto = {
    nombre : "Juan",
    apellido : "Perez",
    telefono : "55443322"
}
console.log(typeof objeto);

#!markdown

El tipo de dato `boolean` puede tomar los valores de `true` o `false` (verdadero o falso). Este tipo de variable se conoce como bandera.

#!javascript

var bandera = false;
console.log(typeof bandera);

#!markdown

El tipo de dato `function` (función) permite realizar una tarea. Lleva adelante una serie de lineas de código y, si necesitamos volver a realizar esa tarea, podemos volver a llamar a la funcion.

#!javascript

function miFuncion(){}
console.log(typeof miFuncion);

#!markdown

El tipo de dato `Symbol` se utiliza para crear un valor unico de una variable. Si necesitamos crear una variable de este tipo llamamos a la funcion `Symbol()` y entre los parentesis pasamos una cadena de caracteres.

#!javascript

var simbolo = Symbol("mi simbolo");
console.log(typeof simbolo);

#!markdown

El tipo de dato `class` (clase) es un tipo `function`. Por lo general  se define la clase con su nombre en singular y empezando en mayusculas. Para poder definir objetos de esta clase necesitamos un constructor. Con la palabra reservada `this` seguida de .A indicamos que al atributo A, propio de la clase, le asignamos el valor de B que viene por parametros en el constructor de la forma `this.A = B`.

#!javascript

class Persona {

  /** constructor de la clase recibe por parametros nombreNuevo, apellidoNuevo */
  constructor(nombreNuevo, apellidoNuevo) {
  
    /** asignamos a los atributos nombre y apellido, propios de la clase, lo que llega por parametro */
    this.nombre = nombreNuevo;
    this.apellido = apellidoNuevo;
    }
}
console.log(typeof Persona);

#!markdown

El tipo de dato `undefined` es un tipo de dato y, a la vez, un valor que puede tomar una variable cuando, por ejemplo, se la declara sin asignarle valores.

#!javascript

var x;
console.log(typeof x);

x = undefined;
console.log(x);

#!markdown

Para el caso de `null`, este no es un tipo de datos sino que es un valor asignable a una variable, que representa la ausencia de valor.

#!javascript

var y = null;
console.log(y);
console.log(typeof y);

#!markdown

Para el caso de los array (arreglos), su tipo de dato es `object`.

#!javascript

var autos = ['BMW','Audi','Volvo'];
console.log(autos);
console.log(typeof autos);

#!markdown

Para el caso de las cadenas vacias su tipo de dato es `string` pero al consultar su contenido nos devuelve `empty string`. `empty string` no es un tipo de dato sino un valor (el contenido de una variable).

#!javascript

var z = '';
console.log(z); // devuelve empty string aunque en notebooks no aparezca así
console.log(typeof z);

#!markdown

## Concatenación de variables

#!markdown

Podemos concatenar variables usando el operador `+`. Al concatenar el contenido de dos o más variables o datos generamos una nueva cadena. Mediante `+ ' ' +` concatenamos un espacio en blanco entre las dos variables.

#!javascript

var nombre = 'Juan';
var apellido = 'Perez';

var nombreCompleto = nombre + ' ' + apellido;
console.log(nombreCompleto);

#!markdown

No es necesario tener en variables los valores para concatenarlos.

#!javascript

var nombreCompleto2 = 'Carlos' + ' ' + 'Lara';
console.log(nombreCompleto2);

#!markdown

La lectura de la operación se hace de izquierda a derecha. Si comienza con numeros, realizar la operación matemática hasta que encuentra un string, a partir del string realiza la concatenación. Se atiende primero las operaciones que están dentro de los parentesis, luego lo que está afuera.

#!javascript

var nombre = 'Juan';
var x = nombre + 2 + 4;
console.log(x);

/**  realiza la suma dentro del paréntesis antes de realizar la concatenación */
x = nombre + (2 + 4);
console.log(x);

x = 2 + 4 + nombre;
console.log(x);

#!markdown

## Declaración de variables

#!markdown

Un litaral es un dato, un string, number, boolean, etc. Los siguientes son literales:

#!javascript

3;
3.5;
'Andrea';

#!markdown

A una variable le asignamos un literal. Podemos decir que dentro de una variable guardamos un literal.

#!javascript

var nombre = 'Andrea';

#!markdown

Ya no se recomienda usar `var` para declarar una variable, ahora usamos `let` para una variable. A su vez tampoco es necesario indicar `let` para declara la variable, se pueden declara solo escribiendo el nombre, pero una buena práctica es escribir `let` antes del nombre de la variable. Podemos declarar primero la variable y asignarle el valor a la misma luego, en otra línea de código distinta.

#!javascript

let nombre;
nombre = "Juan";
console.log(nombre);
nombre = "Pedro";
console.log( nombre );

#!markdown

 Para declarar una constante usamos `const`. A diferencia de las variables a las constantes no se puede reasignar su valor.

#!javascript

const apellido = "Perez";
console.log(apellido);
apellido = "Gomez"; // dará error

#!markdown

La palabra reservada `console` es un objeto. `log` es un método del objeto y el argumento es lo que recibe el método para trabajar  `console.log(argumento)`.

#!javascript

let nombreCompleto = "Juan Perez";
console.log( nombreCompleto );

#!markdown

Podemos declarar las variables por grupos con coma y asignarles el valor en la misma línea también separadas por coma.

#!javascript

let x, y;
x = 10, y = 20;
let z = x + y;
console.log(z);

#!markdown

Javascript es sencible a mayúsculas y minúsculas para los nombres de las variables o funciones. No se puede comenzar el nombre de una variable o funcion con un número. Para el incio del nombre se permiten mayúsculas, minúsculas y los signos _ y $. No se pueden utilizar las palabras reservadas como nombre de variable o función.

#!markdown

# Operadores en Javascript

#!markdown

## Operadores aritméticos

#!markdown

Suma

#!javascript

let a = 3, b = 2;
let z = a + b;
console.log("Resultado de la suma: " + z);

#!markdown

Resta

#!javascript

let a = 3, b = 2;
z = a - b;
console.log("Resultado de la resta: " + z);

#!markdown

Multiplicación

#!javascript

let a = 3, b = 2;
z = a * b;
console.log("Resultado de la multiplicación: " + z);

#!markdown

División

#!javascript

let a = 3, b = 2;
z = a / b;
console.log("Resultado de la división: " + z);

#!markdown

Módulo o resto de la división

#!javascript

let a = 3, b = 2;
z = a % b;
console.log("Resultado del módulo (resto): " + z);

#!markdown

Exponente

#!javascript

let a = 3, b = 2;
z = a ** b;
console.log("Resultado del exponente: " + z);

#!markdown

## Operadores de incremento y decremento

#!markdown

Pre-incremento. El operador `++` va antes de la variable `++variable`.

#!javascript

a = 3;
z = ++a; // se incrementa a en 1 y despues se asigna a z
console.log("a: " + a);
console.log("z: " + z);

#!markdown

Post-incremento. El operador `++` va después de la variable `variable++`.

#!javascript

b = 2;
z = b++; // se asigna b a z y después se hace el incremento de 1 en b
console.log("b: " + b);
console.log("z: " + z);

#!markdown

Pre-decremento. El operador `--` va antes de la variable `--variable`.

#!javascript

a = 3;
z = --a; // se decrementa a en 1 y despues se asigna a z
console.log("a: " + a);
console.log("z: " + z);

#!markdown

Post-decremento. El operador `--` va después de la variable `variable--`.

#!javascript

b = 2;
z = b--; // se asigna b a z y después se hace el decremento de 1 en b
console.log("b: " + b);
console.log("z: " + z);

#!markdown

## Precedencia de operadores

#!markdown

Las expresiones se evaluan de izquierda a derecha. Siempre se evaluan primero las expresiones que estan dentro de los parentesis, desde el mas interior hasta el mas exterior. El orden de prioridad de los operadores es el siguiente:
1.   Paréntesis: () 
2.   División y multiplicación: / *
3.   Suma y resta: + -

#!javascript

a = 3, b = 2, c = 1, d = 4;

z = a * b + c / d;
console.log(z);

z = c + a * b / d;
console.log(z);

z = (c + a) * b / c;
console.log(z);

#!markdown

## Operadores de asignación

#!markdown

Operador de asignación común.

#!javascript

a = 1;
console.log(a);

#!markdown

Operadores de asignación compuesto. Son operadores de asignación que además de asignar el valor realizan una operación aritmética antes de la asignación.

#!javascript

a = 1;

a += 3; // a = a + 3
console.log(a);

a -= 2; // a = a - 2
console.log(a);

a *= 5; // a = a * 5
console.log(a);

a /= 2; // a = a / 2
console.log(a);

a %= 3; // a = a % 2
console.log(a);

a **= 2; // a = a ** 2
console.log(a);

#!markdown

## Operadores de comparación

#!markdown

El operador de comparación de igualdad `==` revisa el valor de las dos variables a comparar sin importar el tipo.

#!javascript

a = 3, b = 2, c = "3";

z = a == c; // convierte la cadena '3' a número y los compara
console.log(z);

#!markdown

El operador de comparación de igualdad `===` revisa el valor de las dos variables a comparar y también su tipo. Ambos tienen que ser iguales para que la comparación de `true`.

#!javascript

a = 3, b = 2, c = "3";

z = a == c; // convierte la cadena '3' a número y los compara
console.log(z);

#!markdown

El operador de comparación de desigualdad `!=` revisa el valor de las dos variables a comparar sin importar el tipo.

#!javascript

a = 3, b = 2, c = "3";

z = a != c; // convierte la cadena '3' a número y los compara
console.log(z);

#!markdown

El operador de comparación de igualdad `!==` revisa el valor de las dos variables a comparar y también su tipo. Ambos tienen que ser iguales para que la comparación de true.

#!javascript

a = 3, b = 2, c = "3";

z = a !== c; // convierte la cadena '3' a número y los compara
console.log(z);

#!markdown

## Operadores relacionales

#!markdown

Son operadores que devuelven valores de verdad (`true` o `false`) dependiendo de la expresión que se evalúa. Los operadores son menor que `<`, menor igual que `<=`, mayor que `>` y mayor igual que `>=`.

#!javascript

a = 3, b = 2, c = "3";

z = a < b;
console.log(z);

z = a <= b;
console.log(z);

z = a > b;
console.log(z);

z = a >= b;
console.log(z);

#!markdown

## Operadores lógicos

#!markdown

El operador lógico and (`&&`) solo devuelve `true` cuando las dos expresiones que se evaluan son `true`.

#!javascript

valMin = 0, valMax = 10;

a = 15;

if( a >= valMin && a <= valMax ){
    console.log("Dentro de rango"); 
}else{
    console.log("Fuera de rango"); // devuelve este mensaje
}

a = 9;

if( a >= valMin && a <= valMax ){
    console.log("Dentro de rango"); // devuelve este mensaje
}else{
    console.log("Fuera de rango"); 
}

#!markdown

El operador lógico or (`||`) solo devuelve `false` cuando las dos expresiones que se evaluan son `false`.

#!javascript

vacaciones = false, diaDescanso = true;

if( vacaciones || diaDescanso ){
    console.log("Padre puede asistir al juego del hijo"); // devuelve este mensaje
}else{
    console.log("El padre está ocupado");
}

vacaciones = false, diaDescanso = false;

if( vacaciones || diaDescanso ){
    console.log("Padre puede asistir al juego del hijo"); 
}else{
    console.log("El padre está ocupado"); // devuelve este mensaje
}

#!markdown

## Operador ternario

#!markdown

El operador ternario revisa la condicion dentro del `()` y devuelve lo que está despues de `?` si la condición dio `true` o lo que está despues de los `:` si la condición dio `false`. No es necesario poner la condicion entre parentesis.

#!javascript

resultado = (1>2) ? "verdadero" : "falso";
console.log(resultado);

numero = 110;
resultado = numero % 2 == 0 ? "Número par" : "Número impar"; 
console.log( resultado );

#!markdown

## Convertir `string` a `number`

#!markdown

Mediante la función `Number` convertimos el valor de una variable de `string` a un `number`.

#!javascript

miNumero = "18";
console.log(typeof miNumero); // devuelve string
 
edad = Number(miNumero);
console.log(typeof edad);
console.log(edad); 
 
if(edad >= 18){
 console.log("Puede votar");
}else{
 console.log("Muy joven para votar");
}
 
resultado = (edad >= 18)? "Puede votar" : "Muy joven para votar";
console.log( resultado );

#!markdown

## Función `isNaN`

#!markdown

Utilizamos la función `isNaN` para saber si la variable es un número antes de trabajar con ella. La función isNaN devuelve `true` si la variable no contiene un número y `false` en caso contrario.

#!javascript

miNumero = "17x";

/** al tener caracteres el string no se puede convertir en número */
edad = Number(miNumero); 

/** devuelve NaN que significa not a number */
console.log(edad);

edad = 18;

if( isNaN(edad)){
  console.log("No es un número");
}else{
  if(edad >= 18){
    console.log("Puede votar");
  }else{
    console.log("Muy joven para votar");
  }
}

if( isNaN(edad)){
  console.log("No es un número");
}
else{
  let resultado = (edad >= 18)? "Puede votar" : "Muy joven para votar";
  console.log( resultado ); 
}

#!markdown

# Estructuras de control
